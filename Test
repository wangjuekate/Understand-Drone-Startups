library(foreign)
fulldata<-read.dta("SytheticControl.dta")


#rerandomize

#non hypothese is that the protests do not have an impact
caldiff<-fulldata[,1:4]
caldiff$NumberofApplication<-fulldata$NumberofApplication

#############################################################################
#control which treatment effect is being tested
caldiff$pubprotest_6m<-fulldata$pubprotest_6m
caldiff$herphidale_6m<-fulldata$herphidale_6m
###############################################################


caldiff$Cluster_statecounty<-fulldata$Cluster_statecounty
caldiff$time<-fulldata$time

calculatebeforeafter<-function(input){
treat<-length(which(input[,6]!=0))

if(treat!=0){
diff<-mean(input[which(input[,6]!=0),5])-mean(input[which(input[,6]==0),5])
}else{
diff<-0
}
output<-data.frame(treat)
output<-cbind(output,diff)
return(output)
}
difference<-ddply(caldiff,.(time),calculatebeforeafter)

#setup simulation
simulate<-function(input,difference){
time<-difference[which(difference[,1]==input[1,8]),2]
if(time!=0){
m<-seq(1:nrow(input))
treat<-sample(1:nrow(input),time[1])
control<-m[!m%in%treat]
diff<-mean(input[treat,5])-mean(input[control,5])
}else{
diff<-0
}
return(diff)
}

simulationmatrix<-matrix(0,nrow=1000,ncol=1)
for (i in 1:nrow(simulationmatrix)){
results<-ddply(caldiff,.(time),simulate,difference)
simulationmatrix[i]<-mean(results[,2])
}
z<-abs(-0.7-mean(simulationmatrix))/sd(simulationmatrix)
pvalue<- pnorm(z,lower.tail=FALSE)


###################################War

calculatebeforeafter<-function(input){
treat<-length(which(input[,10]!=0))

if(treat!=0){
diff<-mean(input[which(input[,10]!=0),5])-mean(input[which(input[,10]==0),5])
}else{
diff<-0
}
output<-data.frame(treat)
output<-cbind(output,diff)
return(output)
}
difference<-ddply(caldiff,.(time),calculatebeforeafter)

#setup simulation
simulate<-function(input,difference){
time<-difference[which(difference[,1]==input[1,8]),2]
if(time!=0){
m<-seq(1:nrow(input))
treat<-sample(1:nrow(input),time[1])
control<-m[!m%in%treat]
diff<-mean(input[treat,5])-mean(input[control,5])
}else{
diff<-0
}
return(diff)
}

simulationmatrix<-matrix(0,nrow=1000,ncol=1)
for (i in 1:nrow(simulationmatrix)){
results<-ddply(caldiff,.(time),simulate,difference)
simulationmatrix[i]<-mean(results[,2])
}
z<-abs(-6.2-mean(simulationmatrix))/sd(simulationmatrix)
pvaluewar<- pnorm(z,lower.tail=FALSE)


##########################diversity

calculatebeforeafter<-function(input){
treat<-length(which(input[,11]!=0))

if(treat!=0){
diff<-mean(input[which(input[,11]!=0),5])-mean(input[which(input[,11]==0),5])
}else{
diff<-0
}
output<-data.frame(treat)
output<-cbind(output,diff)
return(output)
}
difference<-ddply(caldiff,.(time),calculatebeforeafter)

#setup simulation
simulate<-function(input,difference){
time<-difference[which(difference[,1]==input[1,8]),2]
if(time!=0){
m<-seq(1:nrow(input))
treat<-sample(1:nrow(input),time[1])
control<-m[!m%in%treat]
diff<-mean(input[treat,5])-mean(input[control,5])
}else{
diff<-0
}
return(diff)
}

simulationmatrix<-matrix(0,nrow=1000,ncol=1)
for (i in 1:nrow(simulationmatrix)){
results<-ddply(caldiff,.(time),simulate,difference)
simulationmatrix[i]<-mean(results[,2])
}
z<-abs(-1.06-mean(simulationmatrix))/sd(simulationmatrix)
pvaluediversity<- pnorm(z,lower.tail=FALSE)


#Synthetic Control





fulldata<-fulldata[order(fulldata$statefips,fulldata$countyfips,
fulldata$year,fulldata$month),]
addtimeorder<-function(input){
timeorder<-seq(1:24)
output<-paste(timeorder,collapse=",")
return(output)
}
results<-ddply(fulldata,.(statefips,countyfips),addtimeorder)
time<-as.numeric(as.matrix(unlist(strsplit(results[,3],","))))
fulldata$time<-time

#antisurveillance treated
addup<-function(input){
return(sum(input[,80]))
}
library(plyr)
results<-ddply(fulldata,.(statefips,countyfips),addup)
results[which(results$V1!=0),]$V1<-1
length(which(results$V1!=0))
# 17 counties
fulldata<-merge(fulldata,results, by.x=c("statefips","countyfips"), by.y=c("statefips","countyfips"), all.x=TRUE)

#anti war treated
fulldata$V1<-NULL
addup<-function(input){
return(sum(input[,86]))
}
library(plyr)
results<-ddply(fulldata,.(statefips,countyfips),addup)
results[which(results$V1!=0),]$V1<-1
length(which(results$V1!=0))
# 17 counties
fulldata<-merge(fulldata,results, by.x=c("statefips","countyfips"), by.y=c("statefips","countyfips"), all.x=TRUE)



#diversity of protests treated
fulldata$V1<-NULL
addup<-function(input){
return(sum(input[,90]))
}
library(plyr)
results<-ddply(fulldata,.(statefips,countyfips),addup)
results[which(results$V1!=0),]$V1<-1
length(which(results$V1!=0))
fulldata<-merge(fulldata,results, by.x=c("statefips","countyfips"), by.y=c("statefips","countyfips"), all.x=TRUE)



#too many controls, use only 100 of them to construct the controls
#select the controls that have the most applications

treatment<-unique(fulldata[which(fulldata$V1==1),]$Cluster_statecounty)
treatment1<-treatment

k<-sort(fulldata$application_p)
num<-k[(nrow(fulldata)-200):nrow(fulldata)]
control1<-unique(fulldata[which(fulldata$application_p%in%num &
fulldata$V1==0),]$Cluster_statecounty)


library(Synth)

treatmentdata<-matrix(0,nrow=1,ncol=24)
controldata<-matrix(0,nrow=1,ncol=24)
for(i in 1:length(treatment1)){
dataprep.out<-
dataprep(
foo = fulldata,
predictors = c("TotalPop","taxgrossincome","unemploymentRate","ACLU", "postwartreatment"),
predictors.op = "mean",
dependent = "application_p",
unit.variable="Cluster_statecounty",
time.variable="time",
treatment.identifier =treatment1[i],
controls.identifier = control1,
time.predictors.prior = c(1,2,3,4,5,6,7,8,9,10,11,12)
,time.optimize.ssr =  c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)
)

synth.out <- synth(data.prep.obj = dataprep.out)

# Get result tables
treatmentdata<-as.matrix(as.numeric(treatmentdata))+as.matrix(as.numeric(dataprep.out$Y1plot))
controldata<-as.matrix(as.numeric(controldata))+as.matrix(as.numeric(dataprep.out$Y0plot%*%synth.out$solution.w))
}



plotdata<-data.frame(cbind(treatmentdata/i,controldata/i,seq(1:24)))
colnames(plotdata)<-c("treat","control","time")
library(ggplot2)
plot<-ggplot(plotdata,aes(x=time))
plot<-plot+ theme_bw()
plot<-plot+geom_line(aes(y=treat,color="Treatment Group"),linetype=1)+geom_line(aes(y=control,color="Synthetic Group"),linetype=2)
plot<-plot+xlab("Months")+ylab("Enterprise Applications")
plot<-plot+theme(legend.position="bottom")+labs(color="Group Indicator")
plot



