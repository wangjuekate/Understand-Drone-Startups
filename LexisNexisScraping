from selenium import webdriver
from selenium.webdriver.firefox.firefox_profile import FirefoxProfile
from bs4 import BeautifulSoup
import time
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from pprint import pprint
from xlrd import open_workbook
import csv
from selenium.common.exceptions import NoSuchElementException

firefoxProfile = FirefoxProfile()
		## Disable CSS
		# firefoxProfile.set_preference('permissions.default.stylesheet', 2)
		## Disable images
firefoxProfile.set_preference('permissions.default.image', 2)
		## Disable Flash
firefoxProfile.set_preference('dom.ipc.plugins.enabled.libflashplayer.so', 'false')



browser = webdriver.Firefox(firefoxProfile)

browser.get('http://www-lexisnexis-com.libproxy1.usc.edu/hottopics/lnacademic/?')

#log in to lexis nexis

users= 
placeElm= browser.find_element_by_xpath('//div[@id="searchDiv_2"]//input[0]')
placeElm.send_keys("Business Model")


Button=browser.find_element_by_xpath('//div[@id="searchDiv_2"]//input[1]')
Button.click()


firefoxProfile = FirefoxProfile()
		## Disable CSS
		# firefoxProfile.set_preference('permissions.default.stylesheet', 2)
		## Disable images
firefoxProfile.set_preference('permissions.default.image', 2)
		## Disable Flash
firefoxProfile.set_preference('dom.ipc.plugins.enabled.libflashplayer.so', 'false')

csvfile = open('D:\Tools for literature Review\Scape with selenium\outCitation.csv', 'wb')
fieldnames = ['title', 'author','time','source','cited','abstract']
writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
writer.writeheader()

browser = webdriver.Firefox(firefoxProfile)

browser.get('https://scholar.google.com/')

book = open_workbook('D:\Tools for literature Review\Scape with selenium\inCitation.xls')

class Addresses:
    def __init__(self, title="", author="",time="",source="",cited="",abstract=""):
        self.title= title
        self.author= author
        self.time=time
        self.source=source
        self.cited=cited
        self.abstract=abstract


for i in range(0,20):
    tobeadded= Addresses()
    sheet1= book.sheet_by_index(0)

    address1= sheet1.cell(i,0).value

    address1= address1.strip('\t\n\r')


    address1= address1.replace("    ","")

    placeElm= browser.find_element_by_xpath('//div[@id="gs_hp_tsi"]/input')
    placeElm.send_keys(address1)


    Button=browser.find_element_by_xpath('//div[@id="gs_hp_box"]/button[@id="gs_hp_tsb"]')
    Button.click()

    time.sleep(5)

    try:
        address= browser.find_element_by_xpath('//div[@id="gs_ccl"]//div[@class="gs_r"]//h3[@class="gs_rt"]//text()').extract()




        tobeadded.title= address.text.encode('utf-8')

        print tobeadded.name
    except NoSuchElementException:
        tobeadded.name= " "
        
    try:

        address= browser.find_element_by_xpath('//div[@class="cards-entity-address cards-strong"]/div[1]/span')

        tobeadded.address=address.text.encode('utf-8')
    

        print tobeadded.address
        
    except NoSuchElementException:
        tobeadded.address= " "
    
    try:
        
        address= browser.find_element_by_xpath('//div[@class="cards-entity-address cards-strong"]/div[2]/span')
        tobeadded.zipcode= address.text.encode('utf-8')
        print tobeadded.zipcode

    except NoSuchElementException:
        tobeadded.zipcode= " "

    


    writer.writerow({'Name': tobeadded.name, 'Address': tobeadded.address,'Zipcode':tobeadded.zipcode})

    clearele= browser.find_element_by_xpath('//div[@id="gs_st50"]/a')
    clearele.click()


csvfile.close()
    




    
